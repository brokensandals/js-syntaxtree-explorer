{"version":3,"sources":["utils/ast-flattening.js","components/annotated-source/annotated-source-view.js","components/syntax-tree/syntax-tree-view.js","components/json-syntax-tree/json-syntax-tree-view.js","components/ast-explorer/ast-explorer-view.js","components/ast-explorer/ast-explorer-container.js","utils/ast-ids.js","components/app/app-view.js","serviceWorker.js","index.js"],"names":["findNodes","object","Array","isArray","flatMap","type","Object","keys","k","SourceForNode","highlightedNodeId","node","source","onHighlightedNodeChange","cur","range","children","findChildNodes","child","push","slice","key","astId","className","onMouseOver","event","stopPropagation","AnnotatedSourceView","ast","onMouseLeave","AstObjectView","rest","typeElement","rangeElement","entries","val","map","el","index","JSON","stringify","sort","handleMouseOver","join","SyntaxTreeView","JsonAstObjectView","depth","undefined","length","output","childDepth","repeat","JsonSyntaxTreeView","AstExplorerView","treeStyle","onSourceChange","onTreeStyleChange","value","onChange","target","onClick","parse","annotateAstWithIds","state","nextId","obj","annotated","esprima","comment","error","message","buildStateForSource","AstExplorerContainer","props","defaultSource","defaultTreeStyle","handleHighlightedNodeChange","bind","handleSourceChange","handleTreeStyleChange","newNodeId","this","setState","newSource","newStyle","React","Component","TEST_SOURCE","AppView","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70dbd2fb.chunk.js","sourcesContent":["/**\n * Helper function for finding children of a node in the AST.\n * Given a node, this simply returns the node, wrapped in an array.\n * Given anything else, it recursively looks for nodes, and returns\n * an array of all the nodes that can be reached without traveling through\n * an intermediate node.\n * @param {*} object a node, array of nodes, or a property value of a node\n * @return {Object[]} the node or the children that are nodes\n */\nfunction findNodes(object) {\n  if (object == null || typeof object !== 'object') {\n    return [];\n  }\n\n  if (Array.isArray(object)) {\n    return object.flatMap(findNodes);\n  }\n\n  if (object.type) {\n    return [object];\n  }\n\n  return Object.keys(object).flatMap(k => findNodes(object[k]));\n}\n\n/**\n * Finds the children of a given abstract syntax tree node.\n * @param {Object} node a node from the esprima-generated syntax tree\n * @return {Object[]} the child nodes in the syntax tree\n */\nexport function findChildNodes(node) {\n  return Object.keys(node).flatMap(k => findNodes(node[k]));\n}\n","import React from 'react';\nimport './annotated-source.css';\nimport { findChildNodes } from '../../utils/ast-flattening';\n\nfunction SourceForNode({\n  highlightedNodeId,\n  node,\n  source,\n  onHighlightedNodeChange\n}) {\n  let cur = node.range[0];\n  const children = [];\n\n  for (const child of findChildNodes(node)) {\n    if (cur < child.range[0]) {\n      children.push(source.slice(cur, child.range[0]));\n    }\n\n    children.push(<SourceForNode key={child.astId}\n                                 highlightedNodeId={highlightedNodeId}\n                                 node={child}\n                                 source={source}\n                                 onHighlightedNodeChange={onHighlightedNodeChange} />);\n    cur = child.range[1];\n  }\n\n  if (cur < node.range[1]) {\n    children.push(source.slice(cur, node.range[1]));\n  }\n\n  const handleMouseOver = (event) => {\n    onHighlightedNodeChange(node.astId);\n    event.stopPropagation();\n  };\n\n  const className = node.astId === highlightedNodeId ? 'highlighted' : '';\n\n  return <span className={className} onMouseOver={handleMouseOver}>\n    {children}\n  </span>;\n}\n\nfunction AnnotatedSourceView({\n  ast,\n  highlightedNodeId,\n  source,\n  onHighlightedNodeChange\n}) {\n  const clearHighlight = () => onHighlightedNodeChange(null);\n  \n  return <pre className=\"annotated-source\" onMouseLeave={clearHighlight}><code>\n    <SourceForNode highlightedNodeId={highlightedNodeId}\n                   node={ast}\n                   source={source}\n                   onHighlightedNodeChange={onHighlightedNodeChange} />\n  </code></pre>;\n}\n\nexport default AnnotatedSourceView;\n","import React from 'react';\nimport './syntax-tree.css';\n\nfunction AstObjectView({ object, highlightedNodeId, onHighlightedNodeChange }) {\n  const { astId = null, type = null, range = null, ...rest } = object;\n  const typeElement = type ? <span className=\"type\">{type}</span> : null;\n  const rangeElement = range ? <span className=\"range\">{range[0]}-{range[1]}</span> : null;\n\n  const entries = [];\n\n  for (const key in rest) {\n    const val = object[key];\n\n    if (Array.isArray(val)) {\n      entries.push([1, key,\n        <ol>\n          {val.map((el, index) => (\n            <li key={index}>\n              <AstObjectView object={el}\n                             highlightedNodeId={highlightedNodeId}\n                             onHighlightedNodeChange={onHighlightedNodeChange} />\n            </li>\n          ))}\n        </ol>\n      ]);\n    } else if (typeof val === 'object' && val != null) {\n      entries.push([1, key,\n        <AstObjectView object={val}\n                       highlightedNodeId={highlightedNodeId}\n                       onHighlightedNodeChange={onHighlightedNodeChange} />\n      ]);\n    } else {\n      entries.push([0, key, <span className=\"primitive\">{JSON.stringify(val)}</span>]);\n    }\n  }\n\n  entries.sort();\n\n  const handleMouseOver = astId == null ? null : (event) => {\n    onHighlightedNodeChange(astId);\n    event.stopPropagation();\n  };\n\n  const className = [\n    'ast-object',\n    astId && astId === highlightedNodeId ? 'highlighted' : null\n  ].join(' ');\n\n  return <div className={className}\n              onMouseOver={handleMouseOver}>\n    {typeElement} {rangeElement}\n    <dl>\n      {entries.map(([_, key, val], index) =>\n        [\n          <dt key={'k' + index}>{key}</dt>,\n          <dd key={'v' + index}>{val}</dd>\n        ])}\n    </dl>\n  </div>\n}\n\nfunction SyntaxTreeView({ ast, highlightedNodeId, onHighlightedNodeChange }) {\n  const clearHighlight = () => onHighlightedNodeChange(null);\n\n  return <div className=\"syntax-tree\" onMouseLeave={clearHighlight}>\n    <AstObjectView object={ast}\n                   highlightedNodeId={highlightedNodeId}\n                   onHighlightedNodeChange={onHighlightedNodeChange} />\n  </div>\n}\n\nexport default SyntaxTreeView;\n","import React from 'react';\nimport './json-syntax-tree.css';\n\nfunction JsonAstObjectView({ object, highlightedNodeId, depth, onHighlightedNodeChange }) {\n  if (typeof object !== 'object' || object == null || object === undefined) {\n    return <span className=\"primitive\">{JSON.stringify(object)}</span>;\n  }\n  \n  if (Array.isArray(object)) {\n    if (object.length === 0) {\n      return '[]';\n    }\n\n    const output = ['['];\n    const childDepth = depth + 1;\n    for (const [index, child] of object.entries()) {\n      output.push('\\n' + '  '.repeat(childDepth));\n      output.push(\n        <JsonAstObjectView object={child}\n                           highlightedNodeId={highlightedNodeId}\n                           depth={childDepth}\n                           onHighlightedNodeChange={onHighlightedNodeChange}\n                           key={index}/>\n      );\n      if (index < object.length - 1) {\n        output.push(',');\n      }\n    }\n    output.push('\\n' + '  '.repeat(depth) + ']');\n    return output;\n  }\n\n  const { astId = null, ...rest } = object;\n  const keys = Object.keys(rest);\n  if (keys.length === 0) {\n    return ['{}']\n  }\n\n  const children = ['{'];\n  const childDepth = depth + 1;\n  for (const [index, key] of keys.entries()) {\n    children.push('\\n' + '  '.repeat(childDepth));\n    children.push(JSON.stringify(key) + ': ');\n    children.push(\n      <JsonAstObjectView object={object[key]}\n                         highlightedNodeId={highlightedNodeId}\n                         depth={childDepth}\n                         onHighlightedNodeChange={onHighlightedNodeChange}\n                         key={index}/>\n    );\n    if (index < keys.length - 1) {\n      children.push(',');\n    }\n  }\n  children.push('\\n' + '  '.repeat(depth) + '}');\n  \n  const handleMouseOver = astId == null ? null : (event) => {\n    onHighlightedNodeChange(astId);\n    event.stopPropagation();\n  };\n  const className = astId && astId === highlightedNodeId ? 'highlighted' : '';\n  \n  return <span className={className} onMouseOver={handleMouseOver}>\n    {children}\n  </span>;\n}\n\nfunction JsonSyntaxTreeView({ ast, highlightedNodeId, onHighlightedNodeChange }) {\n  const clearHighlight = () => onHighlightedNodeChange(null);\n\n  return <pre className=\"json-syntax-tree\" onMouseLeave={clearHighlight}><code>\n    <JsonAstObjectView object={ast}\n                       highlightedNodeId={highlightedNodeId}\n                       depth={0}\n                       onHighlightedNodeChange={onHighlightedNodeChange} />\n  </code></pre>;\n}\n\nexport default JsonSyntaxTreeView;\n","import React from 'react';\nimport './ast-explorer.css';\nimport AnnotatedSource from '../annotated-source';\nimport SyntaxTree from '../syntax-tree';\nimport JsonSyntaxTreeView from '../json-syntax-tree/json-syntax-tree-view';\n\nfunction AstExplorerView({\n  ast,\n  highlightedNodeId,\n  source,\n  treeStyle,\n  onHighlightedNodeChange,\n  onSourceChange,\n  onTreeStyleChange,\n}) {\n  const handleSourceChange = (event) => onSourceChange(event.target.value);\n  const handleTreeStyleChange = () => onTreeStyleChange(treeStyle === 'json' ? 'styled' : 'json');\n\n  return <div className=\"ast-explorer\">\n    <textarea className=\"source-entry\"\n              value={source}\n              onChange={handleSourceChange} />\n    <AnnotatedSource ast={ast}\n                     highlightedNodeId={highlightedNodeId}\n                     source={source}\n                     onHighlightedNodeChange={onHighlightedNodeChange} />\n    <button className=\"change-tree-style\"\n            onClick={handleTreeStyleChange}>\n      {treeStyle === 'json' ? 'switch to styled view' : 'switch to json view'}\n    </button>\n    {treeStyle === 'json' ?\n      <JsonSyntaxTreeView ast={ast}\n        highlightedNodeId={highlightedNodeId}\n        onHighlightedNodeChange={onHighlightedNodeChange} />\n      :\n      <SyntaxTree ast={ast}\n                highlightedNodeId={highlightedNodeId}\n                onHighlightedNodeChange={onHighlightedNodeChange} />}\n  </div>;\n}\n\nexport default AstExplorerView;\n","import React from 'react';\nimport AstExplorerView from './ast-explorer-view';\nimport * as esprima from 'esprima';\nimport { annotateAstWithIds } from '../../utils/ast-ids';\n\nfunction parse(source) {\n  try {\n    const parsed = esprima.parseModule(source, { comment: true, range: true });\n    const annotated = annotateAstWithIds(parsed);\n    return annotated;\n  } catch (error) {\n    return { type: 'ParseError',\n             message: error.message,\n             astId: 1,\n             range: [0, source.length] };\n  }\n}\n\nfunction buildStateForSource(source) {\n  return { source: source, ast: parse(source) };\n}\n\nclass AstExplorerContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = buildStateForSource(props.defaultSource);\n    this.state.highlightedNodeId = null;\n    this.state.treeStyle = props.defaultTreeStyle || 'styled';\n    this.handleHighlightedNodeChange = this.handleHighlightedNodeChange.bind(this);\n    this.handleSourceChange = this.handleSourceChange.bind(this);\n    this.handleTreeStyleChange = this.handleTreeStyleChange.bind(this);\n  }\n\n  handleHighlightedNodeChange(newNodeId) {\n    this.setState({ highlightedNodeId: newNodeId });\n  }\n\n  handleSourceChange(newSource) {\n    this.setState(buildStateForSource(newSource));\n  }\n\n  handleTreeStyleChange(newStyle) {\n    this.setState({ treeStyle: newStyle });\n  }\n\n  render() {\n    return <AstExplorerView ast={this.state.ast}\n                            highlightedNodeId={this.state.highlightedNodeId}\n                            source={this.state.source}\n                            treeStyle={this.state.treeStyle}\n                            onHighlightedNodeChange={this.handleHighlightedNodeChange}\n                            onSourceChange={this.handleSourceChange}\n                            onTreeStyleChange={this.handleTreeStyleChange} />;\n  }\n}\n\nexport default AstExplorerContainer;\n","/**\n * Annotates all the nodes in an abstract syntax tree with unique identifiers.\n * The tree is copied, not modified in place.\n * The same input tree will always produce the same output - ID generation is deterministic.\n * \n * @param {*} ast - an object from a syntax tree produced by esprima\n * @param {*} state - for internal use only\n * @return {*} The provided ast object, or a copy of it with an astId property added.\n */\nexport function annotateAstWithIds(ast, state = { nextId: 1 }) {\n  if (typeof ast !== 'object' || ast == null) {\n    return ast;\n  }\n\n  if (Array.isArray(ast)) {\n    return ast.map(obj => annotateAstWithIds(obj, state));\n  }\n\n  const annotated = {};\n\n  if (ast.type) {\n    annotated.astId = state.nextId++;\n  }\n\n  for (const key in ast) {\n    annotated[key] = annotateAstWithIds(ast[key], state);\n  }\n\n  return annotated;\n}","import React from 'react';\nimport './app.css';\nimport AstExplorer from '../ast-explorer';\n\nconst TEST_SOURCE = `function fib(n) {\n  if (n == 0 || n == 1) {\n    return n;\n  }\n  return fib(n - 2) + fib(n - 1);\n}`;\n\nfunction AppView() {\n  return (\n    <div className=\"app\">\n      <AstExplorer defaultSource={TEST_SOURCE} />\n      <div className=\"blurb\">\n        created by <a href=\"https://brokensandals.net\">brokensandals</a> | source code on <a href=\"https://github.com/brokensandals/js-syntaxtree-explorer\">github</a> | built using <a href=\"https://esprima.org\">esprima</a>\n      </div>\n    </div>\n  );\n}\n\nexport default AppView;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}